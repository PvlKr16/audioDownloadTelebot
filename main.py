import telebot
from telebot import types
import yt_dlp
import os
import re
import threading
import http.server
import socketserver
from dotenv import load_dotenv
from loguru import logger
from datetime import datetime


# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)
today_log = os.path.join(LOG_DIR, f"{datetime.now().strftime('%Y-%m-%d')}.log")

logger.remove()  # —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤—ã–≤–æ–¥
logger.add(
    today_log,
    rotation="00:00",          # –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    retention="7 days",        # —Ö—Ä–∞–Ω–∏–º –Ω–µ–¥–µ–ª—é
    compression="zip",         # —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–∏—Ä—É—é—Ç—Å—è
    encoding="utf-8",
    enqueue=True,              # –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ
    level="INFO",
)
logger.add(lambda msg: print(msg, end=""), colorize=True, level="INFO")


# —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

user_data = {}
user_lang = {}  # –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

DOWNLOAD_DIR = "downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# ========== –ú–∏–Ω–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä ==========
PORT = 8095

def start_http_server():
    handler = http.server.SimpleHTTPRequestHandler
    os.chdir(DOWNLOAD_DIR)
    with socketserver.TCPServer(("", PORT), handler) as httpd:
        print(f"HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}/")
        httpd.serve_forever()

threading.Thread(target=start_http_server, daemon=True).start()
logger.info("ü§ñ Bot started and HTTP server running on port {}", PORT)
# =======================================================

# —Å–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    "be": {
        "start": "–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ! –î–∞—à–ª—ñ –º–Ω–µ —Å–ø–∞—Å—ã–ª–∫—É –Ω–∞ –≤—ñ–¥—ç–∞, —ñ —è –∑–Ω–∞–π–¥—É –∞—û–¥—ã—è—Ñ–∞—Ä–º–∞—Ç—ã –¥–ª—è —Å–ø–∞–º–ø–æ—û–∫—ñ.",
        "nofile": "–ê—û–¥—ã—è—Ñ–∞–π–ª—ã –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã—è üò¢",
        "choose": "–ê–±—è—Ä—ã –∞—û–¥—ã—è—Ñ–∞—Ä–º–∞—Ç:",
        "quality": "–¶—è–ø–µ—Ä –∞–±—è—Ä—ã —è–∫–∞—Å—Ü—å (–±—ñ—Ç—Ä—ç–π—Ç):",
        "downloading": "–°–ø–∞–º–ø–æ—û–≤–∞—é –∞—û–¥—ã—è...\n–§–∞—Ä–º–∞—Ç: {ext}, —è–∫–∞—Å—Ü—å: {q} kbps",
        "done": "–ì–∞—Ç–æ–≤–∞ ‚úÖ",
        "error": "‚ö†Ô∏è –ù–µ–º–∞–≥—á—ã–º–∞ –∞–¥–ø—Ä–∞–≤—ñ—Ü—å —Ñ–∞–π–ª (–ø–∞–º—ã–ª–∫–∞: {err}).\n–°–ø–∞–º–ø–∞–≤–∞—Ü—å –ø–∞ —Å–ø–∞—Å—ã–ª—Ü—ã (–¥–∑–µ—è–Ω. 2 –≥–∞–¥–∑—ñ–Ω—ã):\n{url}",
        "format_chosen": "–§–∞—Ä–º–∞—Ç –∞–±—Ä–∞–Ω—ã: {ext}.",
        "format_select": "–¶—è–ø–µ—Ä –∞–±—è—Ä—ã –∫–∞–Ω—á–∞—Ç–∫–æ–≤—ã —Ñ–∞—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:",
        "lang_select": "–ê–±—è—Ä—ã —Å–≤–∞—é –º–æ–≤—É:",
        "lang_set": "–ú–æ–≤–∞ –∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫–∞—è üáßüáæ",
        "too_big": "–Ω—è–º–∞ –¥—É—Ä–Ω—ã—Ö —Ç–∞–∫—ñ—è –≤—è–ª—ñ–∫—ñ—è —Ñ–∞–π–ª—ã —Å–ø–∞–º–ø–æ—û–≤–∞—Ü—å, –≤—ã–±—è—Ä—ã –Ω–µ—à—Ç–∞–µ –º–µ–Ω—å—à–∞–µ. –ù–µ–π–∫—É—é –ø–µ—Å–µ–Ω–∫—É, –Ω–∞–ø—Ä—ã–∫–ª–∞–¥",
        "unsupported": "–ì—ç—Ç–∞—è —Å–ø–∞—Å—ã–ª–∫–∞ –Ω–µ –ø–∞–¥—Ç—Ä—ã–º–ª—ñ–≤–∞–µ—Ü—Ü–∞ üö´"
    },
    "en": {
        "start": "Hello! Send me a video link and I‚Äôll find audio formats to download.",
        "nofile": "No audio files found üò¢",
        "choose": "Choose an audio format:",
        "quality": "Now choose quality (bitrate):",
        "downloading": "Downloading audio...\nFormat: {ext}, quality: {q} kbps",
        "done": "Done ‚úÖ",
        "error": "‚ö†Ô∏è Could not send file (error: {err}).\nDownload via link (valid for 2 hours):\n{url}",
        "format_chosen": "Format selected: {ext}.",
        "format_select": "Now choose output file format:",
        "lang_select": "Choose your language:",
        "lang_set": "Language set to English üá¨üáß",
        "too_big": "It makes no sense to download such huge files, please choose something smaller. Some song, for example",
        "unsupported": "This link is not supported üö´"
    },
    "uk": {
        "start": "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ, —ñ —è –∑–Ω–∞–π–¥—É –∞—É–¥—ñ–æ—Ñ–æ—Ä–º–∞—Ç–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.",
        "nofile": "–ê—É–¥—ñ–æ—Ñ–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢",
        "choose": "–í–∏–±–µ—Ä–∏ –∞—É–¥—ñ–æ—Ñ–æ—Ä–º–∞—Ç:",
        "quality": "–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏ —è–∫—ñ—Å—Ç—å (–±—ñ—Ç—Ä–µ–π—Ç):",
        "downloading": "–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∞—É–¥—ñ–æ...\n–§–æ—Ä–º–∞—Ç: {ext}, —è–∫—ñ—Å—Ç—å: {q} kbps",
        "done": "–ì–æ—Ç–æ–≤–æ ‚úÖ",
        "error": "‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª (–ø–æ–º–∏–ª–∫–∞: {err}).\n–ó–∞–≤–∞–Ω—Ç–∞–∂ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º (–¥—ñ–π—Å–Ω–µ 2 –≥–æ–¥–∏–Ω–∏):\n{url}",
        "format_chosen": "–§–æ—Ä–º–∞—Ç –≤–∏–±—Ä–∞–Ω–æ: {ext}.",
        "format_select": "–¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä–∏ –∫—ñ–Ω—Ü–µ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É:",
        "lang_select": "–í–∏–±–µ—Ä–∏ —Å–≤–æ—é –º–æ–≤—É:",
        "lang_set": "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É üá∫üá¶",
        "too_big": "–Ω–µ–º–∞ –¥—É—Ä–Ω–∏—Ö —Ç–∞–∫—ñ –≤–µ–ª–∏–∫—ñ —Ñ–∞–π–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏, –≤–∏–±–µ—Ä—ñ—Ç—å —â–æ—Å—å –º–µ–Ω—à–µ",
        "unsupported": "–¶–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è üö´"
    },
    "ru": {
        "start": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∞ —è –Ω–∞–π–¥—É –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.",
        "nofile": "–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢",
        "choose": "–í—ã–±–µ—Ä–∏ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç:",
        "quality": "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ (–±–∏—Ç—Ä–µ–π—Ç):",
        "downloading": "–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...\n–§–æ—Ä–º–∞—Ç: {ext}, –∫–∞—á–µ—Å—Ç–≤–æ: {q} kbps",
        "done": "–ì–æ—Ç–æ–≤–æ ‚úÖ",
        "error": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª (–æ—à–∏–±–∫–∞: {err}).\n–°–∫–∞—á–∞–π –ø–æ —Å—Å—ã–ª–∫–µ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 2 —á–∞—Å–∞):\n{url}",
        "format_chosen": "–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {ext}.",
        "format_select": "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:",
        "lang_select": "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "lang_set": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫",
        "too_big": "–Ω–µ—Ç –¥—É—Ä–∞–∫–æ–≤ —Ç–∞–∫–∏–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —Å–∫–∞—á–∏–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–º–µ–Ω—å—à–µ. –ö–∞–∫—É—é-—Ç–æ –ø–µ—Å–µ–Ω–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä",
        "unsupported": "–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è üö´"
    }
}

def t(chat_id, key, **kwargs):
    lang = user_lang.get(chat_id, "en")
    return translations[lang][key].format(**kwargs)

# —É—Ç–∏–ª–∏—Ç—ã
def schedule_delete(path, delay=7200):
    def _delete():
        if os.path.exists(path):
            os.remove(path)
            logger.info("[AUTO] File deleted: {}", path)
    threading.Timer(delay, _delete).start()

def sanitize_filename(name: str) -> str:
    return re.sub(r'[\\/*?:"<>|]', "", name).strip()

def format_duration(seconds: int) -> str:
    if not seconds:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    h, m = divmod(seconds, 3600)
    m, s = divmod(m, 60)
    if h:
        return f"{h}:{m:02d}:{s:02d}"
    return f"{m}:{s:02d}"

# –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id

    # –µ—Å–ª–∏ —è–∑—ã–∫ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if chat_id not in user_lang:
        tg_lang = message.from_user.language_code  # –Ω–∞–ø—Ä–∏–º–µ—Ä "ru", "en", "uk", "be"
        if tg_lang in translations:
            user_lang[chat_id] = tg_lang
        else:
            user_lang[chat_id] = "be"  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    bot.send_message(chat_id, t(chat_id, "start"))
    logger.info("User {} started bot. Language: {}", message.from_user.id, user_lang[chat_id])

@bot.message_handler(commands=['language'])
def language(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    langs = [("–ë–µ–ª–∞—Ä—É—Å–∫–∞—è üáßüáæ", "be"), ("English üá¨üáß", "en"), ("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "uk"), ("–†—É—Å—Å–∫–∏–π üá∑üá∫", "ru")]
    for text, code in langs:
        markup.add(types.InlineKeyboardButton(text, callback_data=f"lang_{code}"))
    bot.send_message(chat_id, t(chat_id, "lang_select"), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    chat_id = call.message.chat.id
    code = call.data.split("_")[1]
    user_lang[chat_id] = code
    logger.info("User {} changed language to {}", chat_id, code)
    bot.send_message(chat_id, translations[code]["lang_set"])

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL
@bot.message_handler(func=lambda m: m.text and m.text.startswith("http"))
def handle_url(message):
    url = message.text.strip()
    chat_id = message.chat.id
    logger.info("User {} sent URL: {}", chat_id, url)

    ydl_opts = {"skip_download": True, "noplaylist": True}
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
    except Exception:
        logger.warning("Unsupported URL from {}: {}", chat_id, url)
        bot.send_message(chat_id, t(chat_id, "unsupported"))
        return

    if "entries" in info:
        info = info["entries"][0]

    formats = [f for f in info.get("formats", []) if f.get("acodec") != "none" and f.get("vcodec") == "none"]

    if not formats:
        bot.send_message(chat_id, t(chat_id, "nofile"))
        return

    user_data[chat_id] = {"url": url, "formats": formats, "info": info}

    title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    uploader = info.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")
    duration = format_duration(info.get("duration"))

    text_info = f"üéµ *{title}*\nüë§ {uploader}\n‚è± {duration}"
    bot.send_message(chat_id, text_info, parse_mode="Markdown")

    markup = types.InlineKeyboardMarkup()
    for idx, f in enumerate(formats[:15]):
        kb_text = f"{f.get('format_id')} | {f.get('abr','?')}kbps | {f.get('ext')}"
        markup.add(types.InlineKeyboardButton(kb_text, callback_data=f"choose_{idx}"))

    bot.send_message(chat_id, t(chat_id, "choose"), reply_markup=markup)

# –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_"))
def choose_audio(call):
    chat_id = call.message.chat.id
    idx = int(call.data.split("_")[1])
    formats = user_data[chat_id]["formats"]
    chosen_format = formats[idx]
    user_data[chat_id]["chosen"] = chosen_format

    markup = types.InlineKeyboardMarkup()
    for ext in ["mp3", "m4a", "opus"]:
        markup.add(types.InlineKeyboardButton(ext, callback_data=f"format_{ext}"))

    bot.send_message(chat_id, t(chat_id, "format_chosen", ext=chosen_format['ext']))
    bot.send_message(chat_id, t(chat_id, "format_select"), reply_markup=markup)

# –≤—ã–±–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("format_"))
def ask_quality(call):
    chat_id = call.message.chat.id
    ext = call.data.split("_")[1]
    user_data[chat_id]["ext"] = ext

    markup = types.InlineKeyboardMarkup()
    for q in ["128", "192", "256", "320"]:
        markup.add(types.InlineKeyboardButton(f"{q} kbps", callback_data=f"quality_{q}"))

    bot.send_message(chat_id, t(chat_id, "quality"), reply_markup=markup)

# —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("quality_"))
def download_audio(call):
    chat_id = call.message.chat.id
    quality = call.data.split("_")[1]

    url = user_data[chat_id]["url"]
    chosen_format = user_data[chat_id]["chosen"]
    ext = user_data[chat_id]["ext"]

    info = user_data[chat_id]["info"]
    title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    safe_title = sanitize_filename(title)

    est_size = chosen_format.get("filesize") or chosen_format.get("filesize_approx")

    if est_size and est_size > 20 * 1024 * 1024:  # 20 MB
        bot.send_message(chat_id, t(chat_id, "too_big"))
        logger.info("‚ö†Ô∏è Skipped too large file ({} MB) for user {}", round(est_size / 1048576, 2), chat_id)
        return

    outtmpl = os.path.join(DOWNLOAD_DIR, f"{safe_title}.%(ext)s")

    ydl_opts = {
        "format": chosen_format["format_id"],
        "outtmpl": outtmpl,
        "noplaylist": True,
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": ext,
            "preferredquality": quality,
        }],
    }

    bot.send_message(chat_id, t(chat_id, "downloading", ext=ext.upper(), q=quality))
    logger.info("Downloading {} as {} {}kbps for user {}", title, ext, quality, chat_id)

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    filename = os.path.join(DOWNLOAD_DIR, f"{safe_title}.{ext}")


    try:
        with open(filename, "rb") as f:
            bot.send_document(chat_id, f, caption=title, timeout=60)
        bot.send_message(chat_id, t(chat_id, "done"))
        os.remove(filename)
    except Exception as e:
        logger.error("Error sending file to {}: {}", chat_id, e)
        public_url = f"http://YOUR_SERVER_IP:{PORT}/{os.path.basename(filename)}"
        bot.send_message(chat_id, t(chat_id, "error", err=e, url=public_url))
        schedule_delete(filename, delay=7200)

if __name__ == "__main__":
    bot.infinity_polling()
