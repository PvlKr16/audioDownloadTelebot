import telebot
from telebot import types
import yt_dlp
import os
import math
from dotenv import load_dotenv

load_dotenv()
# —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')

bot = telebot.TeleBot(TOKEN)

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def format_duration(seconds: int) -> str:
    if not seconds:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    h, m = divmod(seconds, 3600)
    m, s = divmod(m, 60)
    if h:
        return f"{h}:{m:02d}:{s:02d}"
    return f"{m}:{s:02d}"

# —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∞ —è –Ω–∞–π–¥—É –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL
@bot.message_handler(func=lambda m: m.text and m.text.startswith("http"))
def handle_url(message):
    url = message.text.strip()
    chat_id = message.chat.id

    ### –ì–∞—Ä–∞–Ω—Ç–∏—è: –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç
    ydl_opts = {"skip_download": True, "noplaylist": True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

    ### –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ "entries", –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if "entries" in info:
        info = info["entries"][0]

    # —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã
    formats = [
        f for f in info.get("formats", [])
        if f.get("acodec") != "none" and f.get("vcodec") == "none"
    ]

    if not formats:
        bot.send_message(chat_id, "–ê—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢")
        return

    user_data[chat_id] = {"url": url, "formats": formats, "info": info}

    title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    uploader = info.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")
    duration = format_duration(info.get("duration"))

    text_info = f"üéµ *{title}*\nüë§ {uploader}\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
    bot.send_message(chat_id, text_info, parse_mode="Markdown")

    markup = types.InlineKeyboardMarkup()
    for idx, f in enumerate(formats[:15]):  # –¥–æ 15 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        kb_text = f"{f.get('format_id')} | {f.get('abr','?')}kbps | {f.get('ext')}"
        markup.add(types.InlineKeyboardButton(kb_text, callback_data=f"choose_{idx}"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç:", reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ
@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_"))
def choose_audio(call):
    chat_id = call.message.chat.id
    idx = int(call.data.split("_")[1])

    formats = user_data[chat_id]["formats"]
    chosen_format = formats[idx]

    user_data[chat_id]["chosen"] = chosen_format

    markup = types.InlineKeyboardMarkup()
    for ext in ["mp3", "m4a", "opus"]:
        markup.add(types.InlineKeyboardButton(ext, callback_data=f"format_{ext}"))

    bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω ID {chosen_format['format_id']} ({chosen_format.get('abr','?')}kbps).\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:", reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("format_"))
def ask_quality(call):
    chat_id = call.message.chat.id
    ext = call.data.split("_")[1]

    user_data[chat_id]["ext"] = ext

    markup = types.InlineKeyboardMarkup()
    for q in ["128", "192", "256", "320"]:
        markup.add(types.InlineKeyboardButton(f"{q} kbps", callback_data=f"quality_{q}"))

    bot.send_message(chat_id, f"–§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: {ext.upper()}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ (–±–∏—Ç—Ä–µ–π—Ç):", reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("quality_"))
def download_audio(call):
    chat_id = call.message.chat.id
    quality = call.data.split("_")[1]

    url = user_data[chat_id]["url"]
    chosen_format = user_data[chat_id]["chosen"]
    ext = user_data[chat_id]["ext"]

    outtmpl = f"{chat_id}_audio.%(ext)s"

    ydl_opts = {
        "format": chosen_format["format_id"],
        "outtmpl": outtmpl,
        "noplaylist": True,   ### –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º: –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": ext,
            "preferredquality": quality,
        }],
    }

    bot.send_message(chat_id, f"–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...\n–§–æ—Ä–º–∞—Ç: {ext.upper()}, –∫–∞—á–µ—Å—Ç–≤–æ: {quality} kbps")

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    info = user_data[chat_id]["info"]
    title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    filename = f"{chat_id}_audio.{ext}"



    with open(filename, "rb") as f:
        bot.send_document(chat_id, f, caption=title)

    os.remove(filename)
    bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ ‚úÖ")


if __name__ == "__main__":
    bot.infinity_polling()
