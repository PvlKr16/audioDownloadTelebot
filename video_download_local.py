import os
import requests
from yt_dlp import YoutubeDL


def get_real_size(url):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HTTP HEAD-–∑–∞–ø—Ä–æ—Å"""
    try:
        response = requests.head(url, allow_redirects=True, timeout=5)
        size = int(response.headers.get("Content-Length", 0))
        return size // 1024 // 1024 if size else None  # MB
    except Exception:
        return None


def main():
    download_dir = "downloads_from_utube"
    os.makedirs(download_dir, exist_ok=True)

    print("üé¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
    print("2. –°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3)")
    mode = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()

    if mode == "2":
        url = input("\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube: ").strip()
        if not url:
            print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return

        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": os.path.join(download_dir, "%(title)s.%(ext)s"),
            "postprocessors": [
                {
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "mp3",
                    "preferredquality": "192",
                }
            ],
        }

        print("\n‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3...\n")
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        print("\n‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –≤ –ø–∞–ø–∫—É:", os.path.abspath(download_dir))
        return

    elif mode != "1":
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    # ---- –í–∏–¥–µ–æ-—Ä–µ–∂–∏–º ----
    url = input("\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube: ").strip()
    if not url:
        print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    print("\nüîç –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n")
    ydl_opts = {"quiet": True, "skip_download": True}
    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

    print(f"üéûÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title')}")
    print(f"üì∫ –ö–∞–Ω–∞–ª: {info.get('uploader')}")
    print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info.get('duration')} —Å–µ–∫—É–Ω–¥\n")

    formats = info.get("formats", [])
    video_formats = [f for f in formats if f.get("vcodec") != "none"]

    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n")
    for i, f in enumerate(video_formats, start=1):
        size = f.get("filesize") or f.get("filesize_approx")
        if not size and f.get("url"):
            real_size = get_real_size(f["url"])
            size_str = f"{real_size} MB" if real_size else "N/A"
        else:
            size_str = f"{(size or 0) // 1024 // 1024} MB" if size else "N/A"

        audio_info = "üéß+–≤–∏–¥–µ–æ" if f.get("acodec") != "none" else "üé• –±–µ–∑ –∑–≤—É–∫–∞"
        print(f"{i:>2}. {f['format_id']:>4}: {f.get('ext','?')} ‚Äî {f.get('format_note','')} ‚Äî {f.get('resolution','N/A')} ‚Äî {audio_info} ‚Äî {size_str}")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ-–≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ): ").strip()

    if not choice:
        # –∞–≤—Ç–æ-—Ä–µ–∂–∏–º: –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ + –ª—É—á—à–∏–π –∑–≤—É–∫
        format_string = "bestvideo+bestaudio/best"
    else:
        if not choice.isdigit() or not (1 <= int(choice) <= len(video_formats)):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            return

        selected_format = video_formats[int(choice) - 1]
        selected_format_id = selected_format["format_id"]

        if selected_format.get("acodec") == "none":
            print("\n‚ö†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞.")
            print("1. –°–∫–∞—á–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –∑–≤—É–∫–∞)")
            print("2. –î–æ–±–∞–≤–∏—Ç—å –ª—É—á—à—É—é –∞—É–¥–∏–æ-–¥–æ—Ä–æ–∂–∫—É")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ-–¥–æ—Ä–æ–∂–∫–∏")
            audio_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2/3): ").strip()

            if audio_choice == "1":
                format_string = selected_format_id
            elif audio_choice == "2":
                format_string = f"{selected_format_id}+bestaudio/best"
            elif audio_choice == "3":
                audio_formats = [f for f in formats if f.get("acodec") != "none" and f.get("vcodec") == "none"]
                print("\nüéß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã:\n")
                for j, af in enumerate(audio_formats, start=1):
                    abr = af.get("abr", "N/A")
                    ext = af.get("ext", "?")
                    size = af.get("filesize") or af.get("filesize_approx")
                    size_str = f"{(size or 0) // 1024 // 1024} MB" if size else "N/A"
                    print(f"{j:>2}. {af['format_id']:>4}: {ext} ‚Äî {abr} kbps ‚Äî {size_str}")

                sel_audio = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è –ª—É—á—à–µ–≥–æ): ").strip()
                if sel_audio and sel_audio.isdigit() and (1 <= int(sel_audio) <= len(audio_formats)):
                    audio_format_id = audio_formats[int(sel_audio) - 1]["format_id"]
                    format_string = f"{selected_format_id}+{audio_format_id}/best"
                else:
                    format_string = f"{selected_format_id}+bestaudio/best"
            else:
                format_string = f"{selected_format_id}+bestaudio/best"
        else:
            format_string = selected_format_id

    print("\n‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...\n")

    ydl_opts = {
        "format": format_string,
        "merge_output_format": "mp4",
        "outtmpl": os.path.join(download_dir, "%(title)s.%(ext)s"),
        "noplaylist": True,
    }

    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    print("\n‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –≤ –ø–∞–ø–∫—É:", os.path.abspath(download_dir))


if __name__ == "__main__":
    main()
