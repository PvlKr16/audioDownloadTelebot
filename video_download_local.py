import os
import requests
from yt_dlp import YoutubeDL

def get_real_size(url):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HTTP HEAD-–∑–∞–ø—Ä–æ—Å"""
    try:
        response = requests.head(url, allow_redirects=True, timeout=5)
        size = int(response.headers.get("Content-Length", 0))
        return size // 1024 // 1024 if size else None  # MB
    except Exception:
        return None


def main():
    # –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    download_dir = "downloads_from_utube"
    os.makedirs(download_dir, exist_ok=True)

    url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube: ").strip()
    if not url:
        print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    print("\nüîç –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n")
    ydl_opts = {"quiet": True, "skip_download": True}
    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

    print(f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title')}")
    print(f"üì∫ –ö–∞–Ω–∞–ª: {info.get('uploader')}")
    print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info.get('duration')} —Å–µ–∫—É–Ω–¥\n")

    # –ë–µ—Ä–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã, –≤–∫–ª—é—á–∞—è video-only
    formats = info.get("formats", [])
    video_formats = [f for f in formats if f.get("vcodec") != "none"]

    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n")
    for i, f in enumerate(video_formats, start=1):
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä (—Ç–æ—á–Ω—ã–π –∏–ª–∏ –æ—Ü–µ–Ω–æ—á–Ω—ã–π)
        size = f.get("filesize") or f.get("filesize_approx")
        if not size and f.get("url"):
            real_size = get_real_size(f["url"])
            size_str = f"{real_size} MB" if real_size else "N/A"
        else:
            size_str = f"{(size or 0) // 1024 // 1024} MB" if size else "N/A"

        audio_info = "üéß+–≤–∏–¥–µ–æ" if f.get("acodec") != "none" else "üé• —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ"
        print(f"{i:>2}. {f['format_id']:>4}: {f.get('ext','?')} ‚Äî {f.get('format_note','')} ‚Äî {f.get('resolution','N/A')} ‚Äî {audio_info} ‚Äî {size_str}")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ-–≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ): ").strip()

    if choice:
        if not choice.isdigit() or not (1 <= int(choice) <= len(video_formats)):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            return
        selected_format = video_formats[int(choice) - 1]['format_id']
        format_string = f"{selected_format}+bestaudio/best"
    else:
        format_string = "bestvideo+bestaudio/best"

    print("\n‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...\n")

    ydl_opts = {
        "format": format_string,
        "merge_output_format": "mp4",
        "outtmpl": os.path.join(download_dir, "%(title)s.%(ext)s"),
        "noplaylist": True,
    }

    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    print("\n‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –≤ –ø–∞–ø–∫—É:", os.path.abspath(download_dir))


if __name__ == "__main__":
    main()
