import os
import requests
from yt_dlp import YoutubeDL

def get_real_size(url):
    """file size detection with HTTP HEAD-request"""
    try:
        response = requests.head(url, allow_redirects=True, timeout=5)
        size = int(response.headers.get("Content-Length", 0))
        return size // 1024 // 1024 if size else None  # MB
    except Exception:
        return None


def print_formats(video_formats, formats_blacklist):
    print("–§–∞—Ä–º–∞—Ç—ã, –¥–∞—Å—Ç—É–ø–Ω—ã—è –¥–ª—è —Å–ø–∞–º–ø–æ—û–∫—ñ:\n")
    available = []
    for i, f in enumerate(video_formats, start=1):
        fmt_id = f.get("format_id")
        if fmt_id in formats_blacklist:
            continue
        size = f.get("filesize") or f.get("filesize_approx")
        if not size and f.get("url"):
            real_size = get_real_size(f["url"])
            size_str = f"{real_size} MB" if real_size else "N/A"
        else:
            size_str = f"{(size or 0) // 1024 // 1024} MB" if size else "N/A"

        audio_info = "üéß+–≤—ñ–¥—ç–∞" if f.get("acodec") != "none" else "üé• –±–µ–∑ –≥—É–∫–∞"
        print(f"{len(available)+1:>2}. {fmt_id:>4}: {f.get('ext','?')} ‚Äî {f.get('format_note','')} "
              f"‚Äî {f.get('resolution','N/A')} ‚Äî {audio_info} ‚Äî {size_str}")
        available.append(f)
    return available


def main():
    download_dir = "downloads_from_utube"
    os.makedirs(download_dir, exist_ok=True)

    print("üé¨ –í—ã–±–µ—Ä—ã—Ü–µ —Ä—ç–∂—ã–º:")
    print("1. –°–ø–∞–º–ø–∞–≤–∞—Ü—å –≤—ñ–¥—ç–∞")
    print("2. –°–ø–∞–º–ø–∞–≤–∞—Ü—å —Ç–æ–ª—å–∫—ñ –∞—û–¥—ã—ë (MP3)")
    mode = input("\n–í–∞—à –≤—ã–±–∞—Ä (1/2): ").strip()

    if mode == "2":
        url = input("\n–£–≤—è–¥–∑—ñ—Ü–µ —Å–ø–∞—Å—ã–ª–∫—É –Ω–∞ YouTube: ").strip()
        if not url:
            print("‚ùå –°–ø–∞—Å—ã–ª–∫–∞ –Ω—è –º–æ–∂–∞ –±—ã—Ü—å –ø—É—Å—Ç–∞—è.")
            return

        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": os.path.join(download_dir, "%(title)s.%(ext)s"),
            "postprocessors": [
                {
                    "key": "FFmpegExtractAudio",
                    "preferredcodec": "mp3",
                    "preferredquality": "192",
                }
            ],
        }

        print("\n‚¨áÔ∏è –°–ø–∞–º–ø–æ—û–∫–∞ –∞—û–¥—ã—ë —û —Ñ–∞—Ä–º–∞—Ü–µ MP3...\n")
        try:
            with YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
        except Exception as e:
            print("‚ùå –ü–∞–º—ã–ª–∫–∞ –ø–∞–¥—á–∞—Å —Å–ø–∞–º–ø–æ—û–∫—ñ –∞—û–¥—ã—ë:", e)
            return

        print("\n‚úÖ –ê—û–¥—ã—ë –ø–∞—Å–ø—è—Ö–æ–≤–∞ —Å–ø–∞–º–ø–∞–≤–∞–Ω–∞–µ —û —Ç—ç—á–∫—É:", os.path.abspath(download_dir))
        return

    elif mode != "1":
        print("‚ùå –ü–∞–º—ã–ª–∫–æ–≤—ã –≤—ã–±–∞—Ä.")
        return

    # ---- Video regime ----
    url = input("\n–£–≤—è–¥–∑—ñ—Ü–µ —Å–ø–∞—Å—ã–ª–∫—É –Ω–∞ –≤—ñ–¥—ç–∞ —Å YouTube: ").strip()
    if not url:
        print("‚ùå –°–ø–∞—Å—ã–ª–∫–∞ –Ω—è –º–æ–∂–∞ –±—ã—Ü—å –ø—É—Å—Ç–∞—è.")
        return

    print("\nüîç –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥—ç–∞. –ö–∞–ª—ñ –ª–∞—Å–∫–∞, –ø–∞—á–∞–∫–∞–π—Ü–µ...\n")
    ydl_opts_probe = {"quiet": True, "skip_download": True}
    with YoutubeDL(ydl_opts_probe) as ydl:
        try:
            info = ydl.extract_info(url, download=False)
        except Exception as e:
            print("‚ùå –ü–∞–º—ã–ª–∫–∞ –ø–∞–¥—á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥—ç–∞:", e)
            return

    print(f"üéûÔ∏è –ù–∞–∑–≤–∞: {info.get('title')}")
    print(f"üì∫ –ö–∞–Ω–∞–ª: {info.get('uploader')}")
    print(f"‚è±Ô∏è –î–∞—û–∂—ã–Ω—è: {info.get('duration')} —Å–µ–∫—É–Ω–¥–∞—û\n")

    formats = info.get("formats", [])
    video_formats_all = [f for f in formats if f.get("vcodec") != "none"]
    if not video_formats_all:
        print("‚ùå –í—ñ–¥—ç–∞-—Ñ–∞—Ä–º–∞—Ç—ã –Ω–µ –∑–Ω–æ–π–¥–∑–µ–Ω—ã—è.")
        return

    formats_blacklist = set()
    auto_mode_blocked = False  # if auto is down, no more tries with it

    # main cycle: user selects option and trying to download,
    # in case of error back to selection (without problem options)
    while True:
        # checking if formats are available
        available_formats = [f for f in video_formats_all if f.get("format_id") not in formats_blacklist]
        if not available_formats:
            print("‚ùå –ù—è–º–∞ —Ñ–∞—Ä–º–∞—Ç–∞—û –¥–ª—è —Å–ø–∞–º–ø–æ—û–∫—ñ (—É—Å–µ –∞–¥–∑–Ω–∞—á–∞–Ω—ã—è —è–∫ –ø—Ä–∞–±–ª–µ–º–Ω—ã—è).")
            return

        # formats
        available_list = print_formats(video_formats_all, formats_blacklist)

        print("\n–ü–∞–¥–∫–∞–∑–∫–∞: —É–≤—è–¥–∑—ñ—Ü–µ –Ω—É–º–∞—Ä —Ñ–∞—Ä–º–∞—Ç—É –¥–ª—è —Å–ø–∞–º–ø–æ—û–∫—ñ, Enter ‚Äî –∞—û—Ç–∞ (–ª–µ–ø—à—ã—è –≤—ñ–¥—ç–∞+–≥—É–∫), q ‚Äî –≤—ã—Ö–∞–¥.")
        choice = input("\n—É–≤—è–¥–∑—ñ—Ü–µ –Ω—É–º–∞—Ä —Ñ–∞—Ä–º–∞—Ç—É (—Ü—ñ Enter/q): ").strip()

        if choice.lower() == "q":
            print("–í—ã—Ö–∞–¥.")
            return

        if not choice:
            if auto_mode_blocked:
                print("‚ö†Ô∏è –†—ç–∂—ã–º –∞—û—Ç–∞ –ø—Ä—ã–≤—ë—û –¥–∞ –ø–∞–º—ã–ª–∫—ñ ‚Äî –≤—ã–±–µ—Ä—ã—Ü–µ —Ñ–∞—Ä–º–∞—Ç —É—Ä—É—á–Ω—É—é.")
                continue
            format_string = "bestvideo+bestaudio/best"
            chosen_desc = "auto (bestvideo+bestaudio/best)"
            chosen_video_format_id = None  # unknown until yt-dlp selects
        else:
            if not choice.isdigit() or not (1 <= int(choice) <= len(available_list)):
                print("‚ùå –ü–∞–º—ã–ª–∫–æ–≤—ã –≤—ã–±–∞—Ä.")
                continue
            selected_f = available_list[int(choice) - 1]
            selected_format_id = selected_f["format_id"]
            chosen_video_format_id = selected_format_id
            # available options in case video is without sound
            if selected_f.get("acodec") == "none":
                print("\n‚ö†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª—ñ –≤—ñ–¥—ç–∞ –±–µ–∑ –≥—É–∫—É.")
                print("1. –°–ø–∞–º–ø–∞–≤–∞—Ü—å —è–∫ —ë—Å—Ü—å (–±–µ–∑ –≥—É–∫—É)")
                print("2. –î–∞–¥–∞—Ü—å –Ω–∞–π–ª–µ–ø—à–∞–µ –∞—û–¥—ã—ë")
                print("3. –ü–∞–∫–∞–∑–∞—Ü—å —É—Å–µ –Ω–∞—è—û–Ω—ã—è –∞—û–¥—ã—ë-—Å—Ü–µ–∂–∫—ñ")
                audio_choice = input("\n–í—ã–±–µ—Ä—ã—Ü–µ –≤–∞—Ä—ã—è–Ω—Ç (1/2/3): ").strip()

                if audio_choice == "1":
                    format_string = selected_format_id
                elif audio_choice == "2":
                    format_string = f"{selected_format_id}+bestaudio/best"
                elif audio_choice == "3":
                    audio_formats = [f for f in formats if f.get("acodec") != "none" and f.get("vcodec") == "none"]
                    if not audio_formats:
                        print("‚ùå –ù—è–º–∞ –∞—û–¥—ã—ë-—Å—Ü–µ–∂–∞–∫.")
                        format_string = f"{selected_format_id}+bestaudio/best"
                    else:
                        print("\nüéß –ù–∞—è—û–Ω—ã—è –∞—û–¥—ã—ë—Ñ–∞—Ä–º–∞—Ç—ã:\n")
                        for j, af in enumerate(audio_formats, start=1):
                            abr = af.get("abr", "N/A")
                            ext = af.get("ext", "?")
                            size = af.get("filesize") or af.get("filesize_approx")
                            size_str = f"{(size or 0) // 1024 // 1024} MB" if size else "N/A"
                            print(f"{j:>2}. {af['format_id']:>4}: {ext} ‚Äî {abr} kbps ‚Äî {size_str}")

                        sel_audio = input("\n–£–≤—è–¥–∑—ñ—Ü–µ –Ω—É–º–∞—Ä –∞—û–¥—ã—ë—Ñ–∞—Ä–º–∞—Ç–∞ (—Ü—ñ Enter –¥–ª—è –Ω–∞–π–ª–µ–ø—à–∞–≥–∞): ").strip()
                        if sel_audio and sel_audio.isdigit() and (1 <= int(sel_audio) <= len(audio_formats)):
                            audio_format_id = audio_formats[int(sel_audio) - 1]["format_id"]
                            format_string = f"{selected_format_id}+{audio_format_id}/best"
                        else:
                            format_string = f"{selected_format_id}+bestaudio/best"
                else:
                    format_string = f"{selected_format_id}+bestaudio/best"
            else:
                format_string = selected_format_id
            chosen_desc = f"format {format_string}"

        print(f"\n‚¨áÔ∏è –°–ø—Ä–æ–±–∞ —Å–ø–∞–º–ø–æ—û–∫—ñ ({chosen_desc})...\n")

        ydl_opts = {
            "format": format_string,
            "merge_output_format": "mp4",
            "outtmpl": os.path.join(download_dir, "%(title)s.%(ext)s"),
            "noplaylist": True,
        }

        try:
            with YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
            print("\n‚úÖ –í—ñ–¥—ç–∞ –ø–∞—Å–ø—è—Ö–æ–≤–∞ —Å–ø–∞–º–ø–∞–≤–∞–Ω–∞–µ —û —Ç—ç—á–∫—É:", os.path.abspath(download_dir))
            return
        except Exception as e:
            err_msg = str(e)
            print("\n‚ùå –ü–∞–º—ã–ª–∫–∞ –ø–∞–¥—á–∞—Å —Å–ø–∞–º–ø–æ—û–∫—ñ:")
            print(err_msg)
            # selected format being added to blacklist
            if chosen_video_format_id:
                print(f"–§–∞—Ä–º–∞—Ç {chosen_video_format_id} –∞–∑–Ω–∞—á–∞–Ω—ã —è–∫ –ø—Ä–∞–±–ª–µ–º–Ω—ã —ñ –±—É–¥–∑–µ –≤—ã–∫–ª—é—á–∞–Ω—ã —Å–∞ —Å–ø—ñ—Å—É.")
                formats_blacklist.add(chosen_video_format_id)
            else:
                # auto mode is down, selection by hand required
                print("–†—ç–∂—ã–º –∞—û—Ç–∞ (bestvideo+bestaudio) –Ω–µ —Å–ø—Ä–∞—Ü–∞–≤–∞—û. –ö–∞–ª—ñ –ª–∞—Å–∫–∞, –≤—ã–±–µ—Ä—ã—Ü–µ —Ñ–∞—Ä–º–∞—Ç —É—Ä—É—á–Ω—É—é.")
                auto_mode_blocked = True

            # in ces 403 error
            if "403" in err_msg or "HTTP Error 403" in err_msg or "Forbidden" in err_msg:
                print("\n–ú–∞–≥—á—ã–º–∞, –¥–æ—Å—Ç—É–ø –∞–±–º–µ–∂–∞–≤–∞–Ω—ã (403 Forbidden).")
            cont = input("\n–¶—ñ —Ö–æ—á–∞—Ü–µ –ø–∞—Å–ø—Ä–∞–±–∞–≤–∞—Ü—å —Å–ø–∞–º–ø–∞–≤–∞—Ü—å —ñ–Ω—à—ã —Ñ–∞—Ä–º–∞—Ç? (y/N): ").strip().lower()
            if cont != "y":
                print("–í—ã—Ö–∞–¥.")
                return
            else:
                print("–ü–∞—û—Ç–æ—Ä–Ω–∞ –ø–∞–∫–∞–∑–≤–∞—é –Ω–∞—è—û–Ω—ã—è —Ñ–∞—Ä–º–∞—Ç—ã (–ø—Ä–∞–±–ª–µ–º–Ω—ã—è –≤—ã–∫–ª—é—á–∞–Ω—ã—è).\n")
                continue


if __name__ == "__main__":
    main()
